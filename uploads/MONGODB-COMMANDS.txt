----------------------MONGODBCOMMANDS------------------


1:show dbs

---Insert Document----

db.movies.insertOne(
  {
    title: "The Favourite",
    genres: [ "Drama", "History" ],
    runtime: 121,
    rated: "R",
    year: 2018,
    directors: [ "Yorgos Lanthimos" ],
    cast: [ "Olivia Colman", "Emma Stone", "Rachel Weisz" ],
    type: "movie"
  }
)


Insert Multiple Document

use sample_mflix

db.movies.insertMany([
   {
      title: "Jurassic World: Fallen Kingdom",
      genres: [ "Action", "Sci-Fi" ],
      runtime: 130,
      rated: "PG-13",
      year: 2018,
      directors: [ "J. A. Bayona" ],
      cast: [ "Chris Pratt", "Bryce Dallas Howard", "Rafe Spall" ],
      type: "movie"
    },
    {
      title: "Tag",
      genres: [ "Comedy", "Action" ],
      runtime: 105,
      rated: "R",
      year: 2018,
      directors: [ "Jeff Tomsic" ],
      cast: [ "Annabelle Wallis", "Jeremy Renner", "Jon Hamm" ],
      type: "movie"
    }
])


---Retrieve Document-------

db.movies.find( { title: "The Favourite" } )

Retrieve All Document

db.movies.find( {} )


---------------------FIND-----------------
db.movies.find()
db.movies.find( { "title": "Titanic" } )
db.movies.find( { rated: { $in: [ "PG", "PG-13" ] } } )

---AND----
use sample_mflix

db.movies.find( { countries: "Mexico", "imdb.rating": { $gte: 7 } } )

---OR----
db.movies.find( {
     year: 2010,
     $or: [ { "awards.wins": { $gte: 5 } }, { genres: "Drama" } ]
} )



----------------UPDATE-------------------
db.movies.find( {
     year: 2010,
     $or: [ { "awards.wins": { $gte: 5 } }, { genres: "Drama" } ]
} )

--UPDATEMANY----

db.movies.deleteMany({})
db.movies.deleteMany( { title: "Titanic" } )
db.movies.deleteOne( { cast: "Brad Pitt" } )






-------------------------------AGGREGATION CONCEPT------------------------------


Data:

{ "_id": 1, "name": "Alice", "age": 25, "city": "New York" }
{ "_id": 2, "name": "Bob", "age": 30, "city": "Los Angeles" }
{ "_id": 3, "name": "Charlie", "age": 35, "city": "New York" }

1: Query: Find people who live in "New York".

db.people.aggregate([
  { $match: { city: "New York" } }
])

output:
{ "_id": 1, "name": "Alice", "age": 25, "city": "New York" }
{ "_id": 3, "name": "Charlie", "age": 35, "city": "New York" }


2: Find the average age of people living in "New York".

db.people.aggregate([
  { $match: { city: "New York" } },
  { $group: { _id: "$city", averageAge: { $avg: "$age" } } }
])

output:
{ "_id": "New York", "averageAge": 30 }

3: Query: Sort people by age in ascending order.

db.people.aggregate([
  { $sort: { age: 1 } }
])

output:
{ "_id": 1, "name": "Alice", "age": 25, "city": "New York" }
{ "_id": 2, "name": "Bob", "age": 30, "city": "Los Angeles" }
{ "_id": 3, "name": "Charlie", "age": 35, "city": "New York" }


4: Query: Display only the names and ages of people.

db.people.aggregate([
  { $project: { name: 1, age: 1 } }
])

output:
{ "_id": 1, "name": "Alice", "age": 25 }
{ "_id": 2, "name": "Bob", "age": 30 }
{ "_id": 3, "name": "Charlie", "age": 35 }


Combining Stages
You can combine multiple stages to perform more complex queries. For example, to find people in "New York" and sort them by age, you can combine $match and $sort:

db.people.aggregate([
  { $match: { city: "New York" } },
  { $sort: { age: 1 } }
])


--------------------------SORT AND LIMIT-------------------

db.movies.find().limit(1)
db.movies.find().sort({title:'awais'})
db.movies.find().skip(1)





--------------------COMPLEX QUERY-------------------------

Less than:
const cursor = db.collection('inventory').find({
  'size.h': { $lt: 15 }
});
And:
const cursor = db.collection('inventory').find({
  'size.h': { $lt: 15 },
  'size.uom': 'in',
  status: 'D'
});


-------Match an Array------

The following example queries for all documents where the field tags value is an array with exactly two elements, "red" and "blank", in the specified order:

const cursor = db.collection('inventory').find({
  tags: ['red', 'blank']
});


If, instead, you wish to find an array that contains both the elements "red" and "blank", without regard to order or other elements in the array, use the $all operator:

const cursor = db.collection('inventory').find({
  tags: { $all: ['red', 'blank'] }
});




!!!!!!!!!!!!!!!!!!!!---IMPORTANT NOTE-----------!!!!!!!!!!!!!!!!!!!!!!!

Equality matches on the whole embedded/nested document require an exact match of the specified document, including the field order. For example, the following query does not match any documents in the inventory collection:

const cursor = db.collection('inventory').find({
  instock: { qty: 5, warehouse: 'A' }
});


If you do not know the index position of the document nested in the array, concatenate the name of the array field, with a dot (.) and the name of the field in the nested document.

const cursor = db.collection('inventory').find({
  'instock.qty': { $lte: 20 }
});




--------------------------CREATE & DROP COLLECTION--------------------
db.createCollection("myNewCollection")
db.myCollection.drop()